function p = trainGDA(data, i)
fprintf('Training model for %s...\n', classname(i));
% data = cell, each cell is a struct with data
% i = class number
% 
% -- TRAINING -- 
% 
% focusing just on accelerometer data for now..
iPos = [1 round(data{i}.m*9/10)]; % take 90% of pos data
mPos = iPos(2) - iPos(1) + 1;

trainingMatrixPos = [...
    data{i}.x1(iPos(1):iPos(2),:) ... 
    data{i}.y1(iPos(1):iPos(2),:) ...
    data{i}.z1(iPos(1):iPos(2),:) ...
    data{i}.x2(iPos(1):iPos(2),:) ...
    data{i}.y2(iPos(1):iPos(2),:) ...
    data{i}.z2(iPos(1):iPos(2),:) ...
    data{i}.x3(iPos(1):iPos(2),:) ... 
    data{i}.y3(iPos(1):iPos(2),:) ...
    data{i}.z3(iPos(1):iPos(2),:) ...
    data{i}.x4(iPos(1):iPos(2),:) ...
    data{i}.y4(iPos(1):iPos(2),:) ...
    data{i}.z4(iPos(1):iPos(2),:) ...
    ]; % m by n

j = i + 1; if j > 5; j = mod(j,5); end
iNeg = [1 round(data{j}.m*9/10)]; % take 90% of neg data
mNeg = iNeg(2) - iNeg(1) + 1; % number of negative examples

trainingMatrixNeg = [...
    data{j}.x1(iNeg(1):iNeg(2),:) ... 
    data{j}.y1(iNeg(1):iNeg(2),:) ...
    data{j}.z1(iNeg(1):iNeg(2),:) ...
    data{j}.x2(iNeg(1):iNeg(2),:) ...
    data{j}.y2(iNeg(1):iNeg(2),:) ...
    data{j}.z2(iNeg(1):iNeg(2),:) ...
    data{j}.x3(iNeg(1):iNeg(2),:) ... 
    data{j}.y3(iNeg(1):iNeg(2),:) ...
    data{j}.z3(iNeg(1):iNeg(2),:) ...
    data{j}.x4(iNeg(1):iNeg(2),:) ...
    data{j}.y4(iNeg(1):iNeg(2),:) ...
    data{j}.z4(iNeg(1):iNeg(2),:) ...
    ]; % m by n

n = size(trainingMatrixPos,2);
phi = mPos/(mPos + mNeg);
muPos = sum(trainingMatrixPos)' / mPos; % n by 1
muNeg = sum(trainingMatrixNeg)' / mNeg; % n by 1
% covariance matrix
cov = 1/mPos * (trainingMatrixPos - repmat(muPos', [mPos 1]))' * ...
    (trainingMatrixPos - repmat(muPos', [mPos 1])) + ...
    1/mNeg * (trainingMatrixNeg - repmat(muNeg', [mNeg 1]))' * ...
    (trainingMatrixNeg - repmat(muNeg', [mNeg 1]));

% assign outputs:
p.phi = phi;
p.muPos = muPos;
p.muNeg = muNeg;
p.cov = cov;
end
