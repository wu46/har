% CS229 | Project | Jennifer Wu |10/19/14

% [data,classRange] = parseData;

% data has the following fields:
%   name
%   gender
%   age
%   height
%   weight
%   bmi
%   x1,y1,z1
%   x2,y2,z2
%   x3,y3,z3
%   x4,y4,z4
%   class:
%       0 - sitting
%       1 - sittingdown
%       2 - standing
%       3 - standingup
%       4 - walking

% index range for classes
% classRange =
%            1       50631
%        50632       62458
%        62459      109828
%       109829      122243
%       122244      165633

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ---- SITTING ----
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
iPos = [1 2000];               % index range of positive examples
iNeg = [50700 60000];         % index range of negative examples
iTestPos = [2001 10000];
iTestNeg = [60001 60900];
mPos = iPos(2) - iPos(1) + 1; % number of positive examples
mNeg = iNeg(2) - iNeg(1) + 1; % number of negative examples

% 
% -- TRAINING -- 
% 
% focusing just on accelerometer data for now..
trainingMatrixPos = [...
    data.x1(iPos(1):iPos(2),:) ... 
    data.y1(iPos(1):iPos(2),:) ...
    data.z1(iPos(1):iPos(2),:) ...
    data.x2(iPos(1):iPos(2),:) ...
    data.y2(iPos(1):iPos(2),:) ...
    data.z2(iPos(1):iPos(2),:) ...
    data.x3(iPos(1):iPos(2),:) ... 
    data.y3(iPos(1):iPos(2),:) ...
    data.z3(iPos(1):iPos(2),:) ...
    data.x4(iPos(1):iPos(2),:) ...
    data.y4(iPos(1):iPos(2),:) ...
    data.z4(iPos(1):iPos(2),:) ...
    ]; % m by n

trainingMatrixNeg = [...
    data.x1(iNeg(1):iNeg(2),:) ... 
    data.y1(iNeg(1):iNeg(2),:) ...
    data.z1(iNeg(1):iNeg(2),:) ...
    data.x2(iNeg(1):iNeg(2),:) ...
    data.y2(iNeg(1):iNeg(2),:) ...
    data.z2(iNeg(1):iNeg(2),:) ...
    data.x3(iNeg(1):iNeg(2),:) ... 
    data.y3(iNeg(1):iNeg(2),:) ...
    data.z3(iNeg(1):iNeg(2),:) ...
    data.x4(iNeg(1):iNeg(2),:) ...
    data.y4(iNeg(1):iNeg(2),:) ...
    data.z4(iNeg(1):iNeg(2),:) ...
    ]; % m by n

n = size(trainingMatrixPos,2);
phi = mPos/(mPos + mNeg);
muPos = sum(trainingMatrixPos)' / mPos; % n by 1
muNeg = sum(trainingMatrixNeg)' / mNeg; % n by 1
% covariance matrix
cov = 1/mPos * (trainingMatrixPos - repmat(muPos', [mPos 1]))' * ...
    (trainingMatrixPos - repmat(muPos', [mPos 1])) + ...
    1/mNeg * (trainingMatrixNeg - repmat(muNeg', [mNeg 1]))' * ...
    (trainingMatrixNeg - repmat(muNeg', [mNeg 1]));

% 
% -- TESTING --
% 

testMatrixPos = [...
    data.x1(iTestPos(1):iTestPos(2),:) ... 
    data.y1(iTestPos(1):iTestPos(2),:) ...
    data.z1(iTestPos(1):iTestPos(2),:) ...
    data.x2(iTestPos(1):iTestPos(2),:) ...
    data.y2(iTestPos(1):iTestPos(2),:) ...
    data.z2(iTestPos(1):iTestPos(2),:) ...
    data.x3(iTestPos(1):iTestPos(2),:) ... 
    data.y3(iTestPos(1):iTestPos(2),:) ...
    data.z3(iTestPos(1):iTestPos(2),:) ...
    data.x4(iTestPos(1):iTestPos(2),:) ...
    data.y4(iTestPos(1):iTestPos(2),:) ...
    data.z4(iTestPos(1):iTestPos(2),:) ...
    ]; % m by n

testMatrixNeg = [...
    data.x1(iTestNeg(1):iTestNeg(2),:) ... 
    data.y1(iTestNeg(1):iTestNeg(2),:) ...
    data.z1(iTestNeg(1):iTestNeg(2),:) ...
    data.x2(iTestNeg(1):iTestNeg(2),:) ...
    data.y2(iTestNeg(1):iTestNeg(2),:) ...
    data.z2(iTestNeg(1):iTestNeg(2),:) ...
    data.x3(iTestNeg(1):iTestNeg(2),:) ... 
    data.y3(iTestNeg(1):iTestNeg(2),:) ...
    data.z3(iTestNeg(1):iTestNeg(2),:) ...
    data.x4(iTestNeg(1):iTestNeg(2),:) ...
    data.y4(iTestNeg(1):iTestNeg(2),:) ...
    data.z4(iTestNeg(1):iTestNeg(2),:) ...
    ]; % m by n

% test results on positive samples
testResPos = zeros(size(testMatrixPos,1),1); 
% test results on negative samples
testResNeg = zeros(size(testMatrixNeg,1),1);

for i = 1:size(testMatrixPos,1)
    % calculate posteriors for postive and negative
    x = testMatrixPos(i,:);
    pPos = 1/((2*pi)^(n/2)*det(cov)^0.5) * ...
        exp(-0.5*(x - muPos') * inv(cov) * (x - muPos')');
    pNeg = 1/((2*pi)^(n/2)*det(cov)^0.5) * ...
        exp(-0.5*(x - muNeg') * inv(cov) * (x - muNeg')');
    if pPos > pNeg
        testResPos(i) = 1; % set to 1 if result is correct
    end
end


for i = 1:size(testMatrixNeg,1)
    % calculate posteriors for postive and negative
    x = testMatrixNeg(i,:);
    pPos = 1/((2*pi)^(n/2)*det(cov)^0.5) * ...
        exp(-0.5*(x - muPos') * inv(cov) * (x - muPos')');
    pNeg = 1/((2*pi)^(n/2)*det(cov)^0.5) * ...
        exp(-0.5*(x - muNeg') * inv(cov) * (x - muNeg')');
    if pPos < pNeg
        testResNeg(i) = 1; % set to 1 if result is correct
    end
end

%
% Output Stats
%

mTestPos = length(testResPos);
mCorrectPos = sum(testResPos);
mTestNeg = length(testResNeg);
mCorrectNeg = sum(testResNeg);
mTest = mTestPos + mTestNeg;
mCorrect = mCorrectPos + mCorrectNeg;

fprintf('%d/%d correct on positive test data, error %.2f%%\n',...
    sum(testResPos), length(testResPos),...
    (1-sum(testResPos)/length(testResPos))*100);

fprintf('%d/%d correct on negative test data, error %.2f%%\n',...
    sum(testResNeg), length(testResNeg),...
    (1-sum(testResNeg)/length(testResNeg))*100);

fprintf('Combined result:\n');
fprintf('%d/%d correct, error %.2f\n\n', mCorrect, mTest, (1-mCorrect/mTest) * 100);
